"""
    Food Data Central API

    The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.abridged_food_item import AbridgedFoodItem
from openapi_client.model.food_list_criteria import FoodListCriteria
from openapi_client.model.food_search_criteria import FoodSearchCriteria
from openapi_client.model.foods_criteria import FoodsCriteria
from openapi_client.model.search_result import SearchResult


class FDCApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __get_food(
            self,
            fdc_id,
            **kwargs
        ):
            """Fetches details for one food item by FDC ID  # noqa: E501

            Retrieves a single food item by an FDC ID. Optional format and nutrients can be specified.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_food(fdc_id, async_req=True)
            >>> result = thread.get()

            Args:
                fdc_id (str): FDC id of the food to retrieve

            Keyword Args:
                format (str): Optional. 'abridged' for an abridged set of elements, 'full' for all elements (default).. [optional]
                nutrients ([int]): Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients=203,204) or repeating parameters (e.g. nutrients=203&nutrients=204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                dict
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['fdc_id'] = \
                fdc_id
            return self.call_with_http_info(**kwargs)

        self.get_food = _Endpoint(
            settings={
                'response_type': (dict,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v1/food/{fdcId}',
                'operation_id': 'get_food',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fdc_id',
                    'format',
                    'nutrients',
                ],
                'required': [
                    'fdc_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'format',
                ],
                'validation': [
                    'nutrients',
                ]
            },
            root_map={
                'validations': {
                    ('nutrients',): {

                        'max_items': 25,
                        'min_items': 1,
                    },
                },
                'allowed_values': {
                    ('format',): {

                        "ABRIDGED": "abridged",
                        "FULL": "full"
                    },
                },
                'openapi_types': {
                    'fdc_id':
                        (str,),
                    'format':
                        (str,),
                    'nutrients':
                        ([int],),
                },
                'attribute_map': {
                    'fdc_id': 'fdcId',
                    'format': 'format',
                    'nutrients': 'nutrients',
                },
                'location_map': {
                    'fdc_id': 'path',
                    'format': 'query',
                    'nutrients': 'query',
                },
                'collection_format_map': {
                    'nutrients': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_food
        )

        def __get_foods(
            self,
            fdc_ids,
            **kwargs
        ):
            """Fetches details for multiple food items using input FDC IDs  # noqa: E501

            Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID's or ones that are not found are omitted and an empty set is returned if there are no matches.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_foods(fdc_ids, async_req=True)
            >>> result = thread.get()

            Args:
                fdc_ids ([str]): List of multiple FDC ID's. Should be comma separated list (e.g. fdcIds=534358,373052) or repeating parameters (e.g. fdcIds=534358&fdcIds=373052).

            Keyword Args:
                format (str): Optional. 'abridged' for an abridged set of elements, 'full' for all elements (default).. [optional]
                nutrients ([int]): Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients=203,204) or repeating parameters (e.g. nutrients=203&nutrients=204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [dict]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['fdc_ids'] = \
                fdc_ids
            return self.call_with_http_info(**kwargs)

        self.get_foods = _Endpoint(
            settings={
                'response_type': ([dict],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v1/foods',
                'operation_id': 'get_foods',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fdc_ids',
                    'format',
                    'nutrients',
                ],
                'required': [
                    'fdc_ids',
                ],
                'nullable': [
                ],
                'enum': [
                    'format',
                ],
                'validation': [
                    'fdc_ids',
                    'nutrients',
                ]
            },
            root_map={
                'validations': {
                    ('fdc_ids',): {

                        'max_items': 20,
                        'min_items': 1,
                    },
                    ('nutrients',): {

                        'max_items': 25,
                        'min_items': 1,
                    },
                },
                'allowed_values': {
                    ('format',): {

                        "ABRIDGED": "abridged",
                        "FULL": "full"
                    },
                },
                'openapi_types': {
                    'fdc_ids':
                        ([str],),
                    'format':
                        (str,),
                    'nutrients':
                        ([int],),
                },
                'attribute_map': {
                    'fdc_ids': 'fdcIds',
                    'format': 'format',
                    'nutrients': 'nutrients',
                },
                'location_map': {
                    'fdc_ids': 'query',
                    'format': 'query',
                    'nutrients': 'query',
                },
                'collection_format_map': {
                    'fdc_ids': 'multi',
                    'nutrients': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_foods
        )

        def __get_foods_list(
            self,
            **kwargs
        ):
            """Returns a paged list of foods, in the 'abridged' format  # noqa: E501

            Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_foods_list(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                data_type ([str]): Optional. Filter on a specific data type; specify one or more values in an array.. [optional]
                page_size (int): Optional. Maximum number of results to return for the current page. Default is 50.. [optional]
                page_number (int): Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize). [optional]
                sort_by (str): Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases.. [optional]
                sort_order (str): Optional. The sort direction for the results. Only applicable if sortBy is specified.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [AbridgedFoodItem]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_foods_list = _Endpoint(
            settings={
                'response_type': ([AbridgedFoodItem],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v1/foods/list',
                'operation_id': 'get_foods_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_type',
                    'page_size',
                    'page_number',
                    'sort_by',
                    'sort_order',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'data_type',
                    'sort_by',
                    'sort_order',
                ],
                'validation': [
                    'data_type',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('data_type',): {

                        'max_items': 4,
                        'min_items': 1,
                    },
                    ('page_size',): {

                        'inclusive_maximum': 200,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('data_type',): {

                        "BRANDED": "Branded",
                        "FOUNDATION": "Foundation",
                        "SURVEY_(FNDDS)": "Survey (FNDDS)",
                        "SR_LEGACY": "SR Legacy"
                    },
                    ('sort_by',): {

                        "DATATYPE.KEYWORD": "dataType.keyword",
                        "LOWERCASEDESCRIPTION.KEYWORD": "lowercaseDescription.keyword",
                        "FDCID": "fdcId",
                        "PUBLISHEDDATE": "publishedDate"
                    },
                    ('sort_order',): {

                        "ASC": "asc",
                        "DESC": "desc"
                    },
                },
                'openapi_types': {
                    'data_type':
                        ([str],),
                    'page_size':
                        (int,),
                    'page_number':
                        (int,),
                    'sort_by':
                        (str,),
                    'sort_order':
                        (str,),
                },
                'attribute_map': {
                    'data_type': 'dataType',
                    'page_size': 'pageSize',
                    'page_number': 'pageNumber',
                    'sort_by': 'sortBy',
                    'sort_order': 'sortOrder',
                },
                'location_map': {
                    'data_type': 'query',
                    'page_size': 'query',
                    'page_number': 'query',
                    'sort_by': 'query',
                    'sort_order': 'query',
                },
                'collection_format_map': {
                    'data_type': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_foods_list
        )

        def __get_foods_search(
            self,
            query,
            **kwargs
        ):
            """Returns a list of foods that matched search (query) keywords  # noqa: E501

            Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_foods_search(query, async_req=True)
            >>> result = thread.get()

            Args:
                query (str): One or more search terms.  The string may include [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)

            Keyword Args:
                data_type ([str]): Optional. Filter on a specific data type; specify one or more values in an array.. [optional]
                page_size (int): Optional. Maximum number of results to return for the current page. Default is 50.. [optional]
                page_number (int): Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize). [optional]
                sort_by (str): Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases.. [optional]
                sort_order (str): Optional. The sort direction for the results. Only applicable if sortBy is specified.. [optional]
                brand_owner (str): Optional. Filter results based on the brand owner of the food. Only applies to Branded Foods. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [SearchResult]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['query'] = \
                query
            return self.call_with_http_info(**kwargs)

        self.get_foods_search = _Endpoint(
            settings={
                'response_type': ([SearchResult],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v1/foods/search',
                'operation_id': 'get_foods_search',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'query',
                    'data_type',
                    'page_size',
                    'page_number',
                    'sort_by',
                    'sort_order',
                    'brand_owner',
                ],
                'required': [
                    'query',
                ],
                'nullable': [
                ],
                'enum': [
                    'data_type',
                    'sort_by',
                    'sort_order',
                ],
                'validation': [
                    'data_type',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('data_type',): {

                        'max_items': 4,
                        'min_items': 1,
                    },
                    ('page_size',): {

                        'inclusive_maximum': 200,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('data_type',): {

                        "BRANDED": "Branded",
                        "FOUNDATION": "Foundation",
                        "SURVEY_(FNDDS)": "Survey (FNDDS)",
                        "SR_LEGACY": "SR Legacy"
                    },
                    ('sort_by',): {

                        "DATATYPE.KEYWORD": "dataType.keyword",
                        "LOWERCASEDESCRIPTION.KEYWORD": "lowercaseDescription.keyword",
                        "FDCID": "fdcId",
                        "PUBLISHEDDATE": "publishedDate"
                    },
                    ('sort_order',): {

                        "ASC": "asc",
                        "DESC": "desc"
                    },
                },
                'openapi_types': {
                    'query':
                        (str,),
                    'data_type':
                        ([str],),
                    'page_size':
                        (int,),
                    'page_number':
                        (int,),
                    'sort_by':
                        (str,),
                    'sort_order':
                        (str,),
                    'brand_owner':
                        (str,),
                },
                'attribute_map': {
                    'query': 'query',
                    'data_type': 'dataType',
                    'page_size': 'pageSize',
                    'page_number': 'pageNumber',
                    'sort_by': 'sortBy',
                    'sort_order': 'sortOrder',
                    'brand_owner': 'brandOwner',
                },
                'location_map': {
                    'query': 'query',
                    'data_type': 'query',
                    'page_size': 'query',
                    'page_number': 'query',
                    'sort_by': 'query',
                    'sort_order': 'query',
                    'brand_owner': 'query',
                },
                'collection_format_map': {
                    'data_type': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_foods_search
        )

        def __get_json_spec(
            self,
            **kwargs
        ):
            """Returns this documentation in JSON format  # noqa: E501

            The OpenAPI 3.0 specification for the FDC API rendered as JSON (JavaScript Object Notation)  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_json_spec(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_json_spec = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v1/json-spec',
                'operation_id': 'get_json_spec',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_json_spec
        )

        def __get_yaml_spec(
            self,
            **kwargs
        ):
            """Returns this documentation in JSON format  # noqa: E501

            The OpenAPI 3.0 specification for the FDC API rendered as YAML (YAML Ain't Markup Language)  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_yaml_spec(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_yaml_spec = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v1/yaml-spec',
                'operation_id': 'get_yaml_spec',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_yaml_spec
        )

        def __post_foods(
            self,
            foods_criteria,
            **kwargs
        ):
            """Fetches details for multiple food items using input FDC IDs  # noqa: E501

            Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID's or ones that are not found are omitted and an empty set is returned if there are no matches.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_foods(foods_criteria, async_req=True)
            >>> result = thread.get()

            Args:
                foods_criteria (FoodsCriteria):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [dict]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['foods_criteria'] = \
                foods_criteria
            return self.call_with_http_info(**kwargs)

        self.post_foods = _Endpoint(
            settings={
                'response_type': ([dict],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v1/foods',
                'operation_id': 'post_foods',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'foods_criteria',
                ],
                'required': [
                    'foods_criteria',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'foods_criteria':
                        (FoodsCriteria,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'foods_criteria': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_foods
        )

        def __post_foods_list(
            self,
            food_list_criteria,
            **kwargs
        ):
            """Returns a paged list of foods, in the 'abridged' format  # noqa: E501

            Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_foods_list(food_list_criteria, async_req=True)
            >>> result = thread.get()

            Args:
                food_list_criteria (FoodListCriteria):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [AbridgedFoodItem]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['food_list_criteria'] = \
                food_list_criteria
            return self.call_with_http_info(**kwargs)

        self.post_foods_list = _Endpoint(
            settings={
                'response_type': ([AbridgedFoodItem],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v1/foods/list',
                'operation_id': 'post_foods_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'food_list_criteria',
                ],
                'required': [
                    'food_list_criteria',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'food_list_criteria':
                        (FoodListCriteria,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'food_list_criteria': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_foods_list
        )

        def __post_foods_search(
            self,
            food_search_criteria,
            **kwargs
        ):
            """Returns a list of foods that matched search (query) keywords  # noqa: E501

            Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_foods_search(food_search_criteria, async_req=True)
            >>> result = thread.get()

            Args:
                food_search_criteria (FoodSearchCriteria): The query string may also include standard [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [SearchResult]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['food_search_criteria'] = \
                food_search_criteria
            return self.call_with_http_info(**kwargs)

        self.post_foods_search = _Endpoint(
            settings={
                'response_type': ([SearchResult],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v1/foods/search',
                'operation_id': 'post_foods_search',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'food_search_criteria',
                ],
                'required': [
                    'food_search_criteria',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'food_search_criteria':
                        (FoodSearchCriteria,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'food_search_criteria': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_foods_search
        )
